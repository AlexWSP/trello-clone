{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","state/appStateReducer.ts","state/AppStateContext.tsx","state/actions.ts","utils/useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","CustomDragLayer.tsx","App.tsx","index.tsx"],"names":["AppContainer","styled","div","DragPreviewWrapper","attrs","position","x","y","style","transform","DragPreviewContainer","props","isPreview","undefined","isHidden","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","lists","push","nanoid","payload","tasks","listId","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItem","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceListIndex","splice","appData","AppStateContext","createContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","useAppState","useContext","setDraggedItem","moveTask","useItemDrag","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","columnId","useDrop","accept","hover","drop","Column","length","map","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","App","addList","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.39059ca6.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const AppContainer = styled.div`\r\n    align-items: flex-start;\r\n    background-color: #3179ba;\r\n    display: flex;\r\n    flex-direction: row;\r\n    height: 100%;\r\n    padding: 20px;\r\n    width: 100%;\r\n`\r\n\r\ntype DragPreviewContainerProps = {\r\n    isHidden?: boolean\r\n    isPreview?: boolean\r\n}\r\n\r\ntype DragPreviewWrapperProps = {\r\n    position: {\r\n        x: number\r\n        y: number\r\n    } \r\n}\r\n\r\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\r\n    ({ position: { x, y } }) => ({\r\n        style: { transform: `translate(${x}px, ${y}px)` }\r\n    })\r\n)<DragPreviewWrapperProps>``\r\n\r\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\r\n    transform: ${props => (props.isPreview ? \"rotate(5deg)\" : undefined)};\r\n    opacity: ${props => (props.isPreview ? 1: props.isHidden ? 0 : 1)}; \r\n`\r\n\r\nexport const ColumnContainer = styled(DragPreviewContainer)`\r\n    background-color: #ebecf0;\r\n    width: 300px;\r\n    min-height: 40px;\r\n    margin-right: 20px;\r\n    border-radius: 3px;\r\n    padding: 8px 8px;\r\n    flex-grow: 0;\r\n`\r\n\r\nexport const ColumnTitle = styled.div`\r\n    padding: 6px 16px 12px;\r\n    font-weight: bold;\r\n`\r\n\r\nexport const CardContainer = styled(DragPreviewContainer)`\r\n    background-color: #fff;\r\n    cursor: pointer;\r\n    margin-bottom: 0.5rem;\r\n    padding: 0.5rem 1rem;\r\n    max-width: 300px;\r\n    border-radius: 3px;\r\n    box-shadow: #091e4240 0px 1px 0px 0px;\r\n`\r\n\r\ntype AddItemButtonProps = {\r\n    dark?: boolean\r\n}\r\n\r\nexport const AddItemButton = styled.button<AddItemButtonProps>`\r\n    background-color: #ffffff3d;\r\n    border-radius: 3px;\r\n    border: none;\r\n    color: ${props => (props.dark ? \"#000\" : \"#fff\")};\r\n    cursor: pointer;\r\n    max-width: 300px;\r\n    padding: 10px 12px;\r\n    text-align: left;\r\n    transition: background 85ms ease-in;\r\n    width: 100%;\r\n    &:hover {\r\n        background-color: #ffffff52;\r\n    } \r\n`\r\n\r\nexport const NewItemFormContainer = styled.div`\r\n    max-width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    align-items: flex-start;\r\n`\r\n\r\nexport const NewItemButton = styled.button`\r\n    background-color: #5aac44;\r\n    border-radius: 3px;\r\n    border: none;\r\n    box-shadow: none;\r\n    color: #fff;\r\n    padding: 6px 12px;\r\n    text-align: center;\r\n`\r\n\r\nexport const NewItemInput = styled.input`\r\n    border-radius: 3px;\r\n    border: none;\r\n    box-shadow: #091e4240 0px 1px 0px 0px;\r\n    margin-bottom: 0.5rem;\r\n    padding: 0.5rem 1rem;\r\n    width: 100%;\r\n`\r\n\r\nexport const CustomDragLayerContainer = styled.div`\r\n    height: 100%;\r\n    left: 0;\r\n    pointer-events: none;\r\n    position: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 100;\r\n`","import { useState } from \"react\"\r\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\"\r\nimport { useFocus } from \"./utils/useFocus\"\r\n\r\ntype NewItemFormProps = {\r\n    onAdd(text: string): void\r\n}\r\n\r\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\r\n    const [text, setText] = useState(\"\")\r\n    const inputRef = useFocus()\r\n    const handleAddText = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            onAdd(text)\r\n        } \r\n    }\r\n\r\n    return (\r\n        <NewItemFormContainer>\r\n            <NewItemInput\r\n                ref={inputRef}\r\n                value={text}\r\n                onChange={e => setText(e.target.value)}\r\n                onKeyPress={handleAddText}\r\n            />\r\n            <NewItemButton onClick={() => onAdd(text)}>\r\n                Create\r\n            </NewItemButton>\r\n        </NewItemFormContainer>\r\n    ) \r\n}","import { useRef, useEffect } from \"react\"\r\n\r\nexport const useFocus = () => {\r\n    const ref = useRef<HTMLInputElement>(null)\r\n\r\n    useEffect(() => {\r\n        ref.current?.focus()\r\n    }, [])\r\n\r\n    return ref\r\n}","import { useState} from \"react\"\r\nimport { AddItemButton } from \"./styles\"\r\nimport { NewItemForm } from \"./NewItemForm\"\r\n\r\ntype AddNewItemProps = {\r\n    onAdd(text: string): void\r\n    toggleButtonText: string\r\n    dark?: boolean\r\n}\r\n\r\nexport const AddNewItem = (props: AddNewItemProps) => {\r\n    const [showForm, setShowForm] = useState(false)\r\n    const { onAdd, toggleButtonText, dark } = props\r\n\r\n    if (showForm) {\r\n        return (\r\n            <NewItemForm\r\n                onAdd={text => {\r\n                    onAdd(text)\r\n                    setShowForm(false)\r\n                }}\r\n            />\r\n        ) \r\n    }\r\n\r\n    return (\r\n        <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\r\n            {toggleButtonText}\r\n        </AddItemButton>\r\n    ) \r\n}","type Item = {\r\n    id: string\r\n}\r\n\r\nexport const findItemIndexById = <TItem extends Item>(items: TItem[], id: string) => {\r\n    return items.findIndex((item: TItem) => item.id === id)\r\n}\r\n\r\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\r\n    const item = array[from]\r\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to)\r\n}\r\n\r\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number) {\r\n    return [...array.slice(0, index), ...array.slice(index + 1)]\r\n}\r\n\r\nexport function insertItemAtIndex<TItem>(array: TItem[], item: TItem, index: number) {\r\n    return [...array.slice(0, index), item, ...array.slice(index)]\r\n}","import { Action } from './actions'\r\nimport { nanoid } from \"nanoid\"\r\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\"\r\nimport { DragItem } from \"../DragItem\"\r\n\r\nexport type Task = {\r\n    id: string\r\n    text: string\r\n}\r\n\r\nexport type List = {\r\n    id: string\r\n    text: string\r\n    tasks: Task[]\r\n}\r\n\r\nexport type AppState = {\r\n    lists: List[]\r\n    draggedItem: DragItem | null;\r\n}\r\n\r\nexport const appStateReducer = (draft: AppState, action: Action): AppState | void => {\r\n    switch (action.type) {\r\n        case \"ADD_LIST\": {\r\n            draft.lists.push({\r\n            id: nanoid(),\r\n            text: action.payload,\r\n            tasks: []\r\n            })\r\n            break\r\n        }\r\n        case \"ADD_TASK\": {\r\n            const { text, listId } = action.payload\r\n            const targetListIndex = findItemIndexById(draft.lists, listId)\r\n\r\n            draft.lists[targetListIndex].tasks.push({\r\n                id: nanoid(),\r\n                text\r\n            })\r\n            break\r\n        }\r\n        case \"MOVE_LIST\": {\r\n            const { draggedId, hoverId } = action.payload\r\n            const dragIndex = findItemIndexById(draft.lists, draggedId)\r\n            const hoverIndex = findItemIndexById(draft.lists, hoverId)\r\n            draft.lists = moveItem(draft.lists, dragIndex, hoverIndex)\r\n            break\r\n        }\r\n        case \"SET_DRAGGED_ITEM\": {\r\n            draft.draggedItem = action.payload\r\n            break\r\n        }\r\n        case \"MOVE_TASK\": {\r\n            const {\r\n                draggedItemId,\r\n                hoveredItemId,\r\n                sourceColumnId,\r\n                targetColumnId\r\n            } = action.payload\r\n            const sourceListIndex = findItemIndexById(draft.lists, sourceColumnId)\r\n            const targetListIndex = findItemIndexById(draft.lists, targetColumnId)\r\n            const dragIndex = findItemIndexById(draft.lists[sourceListIndex].tasks, draggedItemId)\r\n\r\n            const hoverIndex = hoveredItemId \r\n                ? findItemIndexById(\r\n                    draft.lists[targetListIndex].tasks,\r\n                    hoveredItemId\r\n                )\r\n                : 0\r\n\r\n            const item = draft.lists[sourceListIndex].tasks[dragIndex]\r\n\r\n            // Remove the task from the source list\r\n            draft.lists[sourceListIndex].tasks.splice(dragIndex, 1)\r\n            // Add the task to the target list\r\n            draft.lists[targetListIndex].tasks.splice(hoverIndex, 0, item)\r\n            break\r\n        }\r\n        default: {\r\n            break\r\n        } \r\n    } \r\n}","import { createContext, useContext, useEffect, Dispatch, FC } from \"react\"\r\nimport { Action } from './actions'\r\nimport {\r\n    appStateReducer,\r\n    AppState,\r\n    List,\r\n    Task\r\n} from \"./appStateReducer\"\r\nimport { useImmerReducer } from \"use-immer\"\r\nimport { DragItem } from \"../DragItem\"\r\nimport { save } from \"../api\"\r\nimport { withInitialState } from \"../withInitialState\"\r\n\r\nconst appData: AppState = {\r\n    draggedItem: null,\r\n    lists: [ \r\n        {\r\n            id: \"0\",\r\n            text: \"To Do\",\r\n            tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\r\n        },\r\n        {\r\n            id: \"1\",\r\n            text: \"In Progress\",\r\n            tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\r\n        },\r\n        {\r\n            id: \"2\",\r\n            text: \"Done\",\r\n            tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\r\n        }\r\n    ] \r\n}\r\n\r\ntype AppStateContextProps = {\r\n    draggedItem: DragItem | null\r\n    lists: List[]\r\n    getTasksByListId(id: string): Task[]\r\n    dispatch: Dispatch<Action>\r\n}\r\n\r\ntype AppStateProviderProps = {\r\n    children: React.ReactNode\r\n    initialState: AppState\r\n}\r\n\r\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\r\n\r\n// export const AppStateProvider = withInitialState<AppStateProviderProps>(\r\n    export const AppStateProvider: FC = ({ children }) => {\r\n        const [state, dispatch] = useImmerReducer(appStateReducer, appData)\r\n    // ({ children, initialState }) => {\r\n    //     const [state, dispatch] = useImmerReducer(\r\n    //         appStateReducer,\r\n    //         initialState\r\n    //     )\r\n\r\n        // useEffect(() => {\r\n        // save(state)\r\n        // }, [state])\r\n\r\n        const { draggedItem, lists } = state\r\n        const getTasksByListId = (id: string) => {\r\n            return lists.find((list) => list.id === id)?.tasks || []\r\n        }\r\n        return (\r\n            <AppStateContext.Provider value={{ draggedItem, lists, getTasksByListId, dispatch }}>\r\n                {children}\r\n            </AppStateContext.Provider> \r\n        ) \r\n    } \r\n// )\r\n\r\nexport const useAppState = () => {\r\n    return useContext(AppStateContext)\r\n}","import { DragItem } from \"../DragItem\"\r\n\r\nexport type Action = \r\n    | {\r\n        type: \"ADD_LIST\"\r\n        payload: string\r\n      } \r\n    | {\r\n        type: \"ADD_TASK\"\r\n        payload: { text: string; listId: string }\r\n    }\r\n    | {\r\n        type: \"MOVE_LIST\"\r\n        payload: { draggedId: string; hoverId: string} \r\n    }\r\n    | {\r\n        type: \"SET_DRAGGED_ITEM\"\r\n        payload: DragItem | null\r\n    }\r\n    | {\r\n        type: \"MOVE_TASK\"\r\n        payload: {\r\n            draggedItemId: string\r\n            hoveredItemId: string | null\r\n            sourceColumnId: string\r\n            targetColumnId: string\r\n        } \r\n    }\r\n\r\nexport const addTask = (text: string, listId: string,): Action => ({\r\n    type: \"ADD_TASK\",\r\n    payload: {\r\n        text,\r\n        listId\r\n    }\r\n})\r\n\r\nexport const addList = (text: string,): Action => ({\r\n    type: \"ADD_LIST\",\r\n    payload: text\r\n})\r\n\r\nexport const moveList = (draggedId: string, hoverId: string,): Action => ({\r\n    type: \"MOVE_LIST\",\r\n    payload: {\r\n        draggedId,\r\n        hoverId,\r\n    }\r\n})\r\n\r\nexport const setDraggedItem = (draggedItem: DragItem | null,): Action => ({\r\n    type: \"SET_DRAGGED_ITEM\",\r\n    payload: draggedItem\r\n})\r\n\r\nexport const moveTask = (\r\n    draggedItemId: string,\r\n    hoveredItemId: string | null,\r\n    sourceColumnId: string,\r\n    targetColumnId: string\r\n): Action => ({\r\n    type: \"MOVE_TASK\",\r\n    payload: {\r\n        draggedItemId,\r\n        hoveredItemId,\r\n        sourceColumnId,\r\n        targetColumnId\r\n    }\r\n})","import { useDrag } from \"react-dnd\"\r\nimport { useAppState } from \"../state/AppStateContext\"\r\nimport { DragItem } from \"../DragItem\"\r\nimport { setDraggedItem } from \"../state/actions\"\r\nimport { useEffect } from \"react\"\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\"\r\n\r\nexport const useItemDrag = (item: DragItem) => {\r\n    const { dispatch } = useAppState()\r\n    const [, drag, preview] = useDrag({\r\n        type: item.type,\r\n        item: () => {\r\n            dispatch(setDraggedItem(item))\r\n            return item\r\n        },\r\n        end: () => dispatch(setDraggedItem(null))\r\n    })\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true })\r\n    }, [preview])\r\n    return { drag }\r\n}","import { DragItem } from \"../DragItem\"\r\n\r\nexport const isHidden = (draggedItem: DragItem | null, itemType: string, id: string, isPreview?: boolean): boolean => {\r\n    return Boolean( \r\n        !isPreview &&\r\n        draggedItem &&\r\n        draggedItem.type === itemType &&\r\n        draggedItem.id === id\r\n    ) \r\n}","import { useRef } from \"react\"\r\nimport { CardContainer } from \"./styles\"\r\nimport { useItemDrag } from \"./utils/useItemDrag\"\r\nimport { useDrop } from \"react-dnd\"\r\nimport { useAppState } from \"./state/AppStateContext\"\r\nimport { isHidden } from \"./utils/isHidden\"\r\nimport { moveTask } from \"./state/actions\"\r\n\r\ntype CardProps = {\r\n    text: string\r\n    id: string\r\n    columnId: string\r\n    isPreview?: boolean\r\n}\r\n\r\nexport const Card = ({ text, id, columnId, isPreview }: CardProps) => {\r\n    const { draggedItem, dispatch } = useAppState()\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    const { drag } = useItemDrag({ type: \"CARD\", id, text, columnId })\r\n    \r\n    const [, drop] = useDrop({\r\n        accept: \"CARD\",\r\n        hover() {\r\n            if (!draggedItem) {return}\r\n            if (draggedItem.type !== \"CARD\") {return}\r\n            if (draggedItem.id === id) {return}\r\n            dispatch(\r\n                moveTask(draggedItem.id, id, draggedItem.columnId, columnId)\r\n            ) \r\n        }\r\n    })\r\n\r\n    drag(drop(ref))\r\n\r\n    return(\r\n        <CardContainer \r\n            isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)}\r\n            isPreview={isPreview}\r\n            ref={ref}\r\n        >\r\n            {text}\r\n        </CardContainer>\r\n    )\r\n}","import { useRef } from \"react\"\r\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\r\nimport { AddNewItem } from \"./AddNewItem\"\r\nimport { useAppState } from \"./state/AppStateContext\"\r\nimport { Card } from \"./Card\"\r\nimport { useDrop } from \"react-dnd\"\r\nimport { addTask, moveTask, moveList, setDraggedItem } from \"./state/actions\"\r\nimport { useItemDrag } from \"./utils/useItemDrag\"\r\nimport { isHidden } from \"./utils/isHidden\"\r\nimport { DragItem } from \"./DragItem\"\r\n\r\ntype ColumnProps = {\r\n    text: string\r\n    id: string\r\n    isPreview?: boolean\r\n}\r\n\r\nexport const Column = ({ text, id, isPreview }: ColumnProps) => {\r\n    const { draggedItem, getTasksByListId, dispatch } = useAppState()\r\n    const tasks = getTasksByListId(id)\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    const [, drop] = useDrop({\r\n        accept: [\"COLUMN\", \"CARD\"],\r\n        hover(item: DragItem) {\r\n            if (!draggedItem) {return}\r\n            if (item.type === \"COLUMN\") {\r\n                if (draggedItem.type === \"COLUMN\") {\r\n                    if (draggedItem.id === id) {return;}\r\n                    dispatch(moveList(draggedItem.id, id))\r\n                } \r\n            } else {\r\n                if (draggedItem.type === \"CARD\") {\r\n                    if (draggedItem.columnId === id) {return}\r\n                    if (tasks.length) {return}\r\n                    dispatch(moveTask(draggedItem.id, null, draggedItem.columnId, id))\r\n                    dispatch(setDraggedItem({ ...draggedItem, columnId: id }))\r\n                }\r\n            }\r\n\r\n        }\r\n    })\r\n\r\n    const { drag } = useItemDrag({ type: \"COLUMN\", id, text })\r\n\r\n    drag(drop(ref))\r\n\r\n    return (\r\n        <ColumnContainer isPreview={isPreview} ref={ref} isHidden={isHidden(draggedItem, \"COLUMN\", id)}>\r\n        <ColumnTitle>{text}</ColumnTitle>\r\n        {tasks.map((task) => (\r\n            <Card text={task.text} columnId={id} key={task.id} id={task.id}/>\r\n        ))}\r\n\r\n        <AddNewItem\r\n            toggleButtonText=\"+ Add another card\"\r\n            onAdd={(text) => dispatch(addTask(text, id))}\r\n            dark\r\n        />\r\n        </ColumnContainer>\r\n    )\r\n}","import { useDragLayer } from \"react-dnd\"\r\nimport { Column } from \"./Column\"\r\nimport { Card } from \"./Card\"\r\nimport { CustomDragLayerContainer, DragPreviewWrapper } from \"./styles\"\r\nimport { useAppState } from \"./state/AppStateContext\"\r\n\r\nexport const CustomDragLayer = () => {\r\n    const { draggedItem } = useAppState()\r\n    const { currentOffset } = useDragLayer((monitor) => ({\r\n        currentOffset: monitor.getSourceClientOffset()\r\n    }))\r\n\r\n    return draggedItem && currentOffset ? (\r\n        <CustomDragLayerContainer>\r\n            <DragPreviewWrapper position={currentOffset}>\r\n            {draggedItem.type === \"COLUMN\" ? (\r\n                <Column id={draggedItem.id} text={draggedItem.text} isPreview />\r\n            ) : (\r\n                <Card columnId={draggedItem.columnId} isPreview id={draggedItem.id} text={draggedItem.text} />\r\n            )}\r\n            </DragPreviewWrapper>\r\n        </CustomDragLayerContainer>\r\n    ) : null\r\n}","import { Column } from \"./Column\"\nimport { AppContainer } from \"./styles\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./state/AppStateContext\"\nimport { CustomDragLayer } from \"./CustomDragLayer\"\nimport { addList } from \"./state/actions\"\n\nexport const App = () => {\n  const { lists, dispatch } = useAppState()\n  \n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      \n      {lists.map((list) => ( <Column id={list.id} text={list.text} key={list.id}/> ))}\n\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={text => dispatch(addList(text))}\n      />\n    </AppContainer>\n  ) \n}","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport { App } from \"./App\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\"\r\nimport { AppStateProvider } from \"./state/AppStateContext\"\r\n\r\nReactDOM.render( \r\n    <React.StrictMode> \r\n        <DndProvider backend={Backend}> \r\n            <AppStateProvider> \r\n                <App /> \r\n            </AppStateProvider> \r\n        </DndProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root') \r\n);"],"sourceRoot":""}